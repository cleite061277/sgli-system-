"""
Comando: python manage.py validar_notificacoes
Valida configura√ß√£o do sistema de notifica√ß√µes
"""
from django.core.management.base import BaseCommand
from django.conf import settings
from core.notifications import EmailSender, WhatsAppSender
from core.models import Comanda, Locatario
from datetime import date, timedelta


class Command(BaseCommand):
    help = 'Valida configura√ß√£o do sistema de notifica√ß√µes'
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=' * 60))
        self.stdout.write(self.style.SUCCESS('VALIDA√á√ÉO DO SISTEMA DE NOTIFICA√á√ïES'))
        self.stdout.write(self.style.SUCCESS('=' * 60))
        self.stdout.write('')
        
        problemas = []
        avisos = []
        
        # 1. Verificar Django-Q
        self.stdout.write('üì¶ [1/8] Verificando Django-Q...')
        try:
            from django_q.models import Schedule
            schedules = Schedule.objects.filter(func='core.tasks.enviar_lembretes_vencimento')
            
            if schedules.exists():
                self.stdout.write(self.style.SUCCESS('   ‚úÖ Agendamento configurado'))
                schedule = schedules.first()
                self.stdout.write(f"      Pr√≥xima execu√ß√£o: {schedule.next_run}")
            else:
                avisos.append('Agendamento n√£o configurado')
                self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  Agendamento n√£o configurado'))
                self.stdout.write('      Execute: python manage.py configurar_agendamento')
        except Exception as e:
            problemas.append(f'Django-Q: {str(e)}')
            self.stdout.write(self.style.ERROR(f'   ‚ùå Erro: {str(e)}'))
        
        self.stdout.write('')
        
        # 2. Verificar configura√ß√µes no .env
        self.stdout.write('‚öôÔ∏è  [2/8] Verificando configura√ß√µes (.env)...')
        
        if settings.NOTIFICACOES_ATIVAS:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Notifica√ß√µes ATIVAS'))
        else:
            avisos.append('Notifica√ß√µes desativadas')
            self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  Notifica√ß√µes DESATIVADAS'))
            self.stdout.write('      Altere NOTIFICACOES_ATIVAS=True no .env')
        
        self.stdout.write(f"   Dias anteced√™ncia: {settings.DIAS_ANTECEDENCIA_LEMBRETE}")
        self.stdout.write(f"   Hor√°rio de envio: {settings.HORARIO_ENVIO}")
        self.stdout.write(f"   Email ativo: {settings.ENVIAR_EMAIL}")
        self.stdout.write(f"   WhatsApp ativo: {settings.ENVIAR_WHATSAPP}")
        
        self.stdout.write('')
        
        # 3. Verificar Email
        self.stdout.write('üìß [3/8] Verificando configura√ß√£o de Email...')
        
        if settings.EMAIL_HOST_USER and settings.EMAIL_HOST_PASSWORD:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Credenciais de email configuradas'))
            self.stdout.write(f"      Email: {settings.EMAIL_HOST_USER}")
            self.stdout.write(f"      Servidor: {settings.EMAIL_HOST}:{settings.EMAIL_PORT}")
        else:
            avisos.append('Email n√£o configurado')
            self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  Email n√£o configurado'))
            self.stdout.write('      Configure EMAIL_HOST_USER e EMAIL_HOST_PASSWORD no .env')
        
        self.stdout.write('')
        
        # 4. Verificar Twilio
        self.stdout.write('üì± [4/8] Verificando configura√ß√£o Twilio...')
        
        if settings.TWILIO_ACCOUNT_SID and settings.TWILIO_AUTH_TOKEN:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Credenciais Twilio configuradas'))
            self.stdout.write(f"      Account SID: {settings.TWILIO_ACCOUNT_SID[:10]}...")
            self.stdout.write(f"      WhatsApp de: {settings.TWILIO_WHATSAPP_FROM}")
        else:
            avisos.append('Twilio n√£o configurado')
            self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  Twilio n√£o configurado'))
            self.stdout.write('      Configure TWILIO_ACCOUNT_SID e TWILIO_AUTH_TOKEN no .env')
        
        self.stdout.write('')
        
        # 5. Verificar banco de dados
        self.stdout.write('üóÑÔ∏è  [5/8] Verificando banco de dados...')
        
        try:
            total_locatarios = Locatario.objects.count()
            self.stdout.write(self.style.SUCCESS(f'   ‚úÖ {total_locatarios} locat√°rios cadastrados'))
            
            # Verificar locat√°rios com email
            com_email = Locatario.objects.exclude(email__isnull=True).exclude(email='').count()
            self.stdout.write(f"      Com email: {com_email}")
            
            # Verificar locat√°rios com telefone
            com_telefone = Locatario.objects.exclude(telefone__isnull=True).exclude(telefone='').count()
            self.stdout.write(f"      Com telefone: {com_telefone}")
            
            if com_email == 0:
                avisos.append('Nenhum locat√°rio tem email cadastrado')
            if com_telefone == 0:
                avisos.append('Nenhum locat√°rio tem telefone cadastrado')
                
        except Exception as e:
            problemas.append(f'Banco de dados: {str(e)}')
            self.stdout.write(self.style.ERROR(f'   ‚ùå Erro: {str(e)}'))
        
        self.stdout.write('')
        
        # 6. Verificar comandas
        self.stdout.write('üìã [6/8] Verificando comandas...')
        
        try:
            total_comandas = Comanda.objects.count()
            pendentes = Comanda.objects.filter(status='PENDENTE').count()
            
            self.stdout.write(self.style.SUCCESS(f'   ‚úÖ {total_comandas} comandas no sistema'))
            self.stdout.write(f"      Pendentes: {pendentes}")
            
            # Comandas que vencem nos pr√≥ximos X dias
            dias = settings.DIAS_ANTECEDENCIA_LEMBRETE
            data_alvo = date.today() + timedelta(days=dias)
            futuras = Comanda.objects.filter(
                data_vencimento=data_alvo,
                status='PENDENTE'
            ).count()
            
            self.stdout.write(f"      Vencem em {dias} dias: {futuras}")
            
            if futuras == 0:
                avisos.append(f'Nenhuma comanda vence em {dias} dias')
                
        except Exception as e:
            problemas.append(f'Comandas: {str(e)}')
            self.stdout.write(self.style.ERROR(f'   ‚ùå Erro: {str(e)}'))
        
        self.stdout.write('')
        
        # 7. Verificar sistema principal
        self.stdout.write('üè† [7/8] Verificando sistema principal...')
        
        from django.core.management import call_command
        from io import StringIO
        
        try:
            out = StringIO()
            call_command('check', stdout=out, stderr=out)
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Sistema Django OK'))
        except Exception as e:
            problemas.append(f'Sistema Django: {str(e)}')
            self.stdout.write(self.style.ERROR(f'   ‚ùå Erro: {str(e)}'))
        
        self.stdout.write('')
        
        # 8. Teste de importa√ß√µes
        self.stdout.write('üì¶ [8/8] Verificando m√≥dulos...')
        
        try:
            from core.tasks import enviar_lembretes_vencimento, enviar_lembrete_manual
            from core.notifications import EmailSender, WhatsAppSender, MessageFormatter
            from core.notifications.models import NotificacaoLog
            
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Todos os m√≥dulos importados com sucesso'))
        except ImportError as e:
            problemas.append(f'Importa√ß√£o: {str(e)}')
            self.stdout.write(self.style.ERROR(f'   ‚ùå Erro de importa√ß√£o: {str(e)}'))
        
        self.stdout.write('')
        
        # Resumo
        self.stdout.write('=' * 60)
        self.stdout.write(self.style.SUCCESS('RESUMO DA VALIDA√á√ÉO'))
        self.stdout.write('=' * 60)
        self.stdout.write('')
        
        if not problemas and not avisos:
            self.stdout.write(self.style.SUCCESS('üéâ SISTEMA 100% CONFIGURADO E PRONTO!'))
            self.stdout.write('')
            self.stdout.write('‚úÖ Todas as verifica√ß√µes passaram')
            self.stdout.write('‚úÖ Sistema pronto para uso')
            self.stdout.write('')
            self.stdout.write('üìã Pr√≥ximos passos:')
            self.stdout.write('   1. Configurar credenciais (se ainda n√£o fez)')
            self.stdout.write('   2. Ativar notifica√ß√µes: NOTIFICACOES_ATIVAS=True')
            self.stdout.write('   3. Iniciar worker: ./iniciar_worker.sh')
            
        elif problemas:
            self.stdout.write(self.style.ERROR('‚ùå PROBLEMAS ENCONTRADOS:'))
            self.stdout.write('')
            for p in problemas:
                self.stdout.write(self.style.ERROR(f'   ‚Ä¢ {p}'))
            self.stdout.write('')
            self.stdout.write(self.style.ERROR('‚ö†Ô∏è  Corrija os problemas antes de usar'))
            
        elif avisos:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  AVISOS:'))
            self.stdout.write('')
            for a in avisos:
                self.stdout.write(self.style.WARNING(f'   ‚Ä¢ {a}'))
            self.stdout.write('')
            self.stdout.write('Sistema funcional, mas requer configura√ß√£o adicional')
        
        self.stdout.write('')
        self.stdout.write('=' * 60)
