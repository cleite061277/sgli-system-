# Generated by Django 4.2.8 on 2025-10-28 04:12

import core.models
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tipo_usuario', models.CharField(choices=[('ADMIN', 'Administrador'), ('MANAGER', 'Gerente'), ('ATTENDANT', 'Atendente'), ('FINANCIAL', 'Financeiro'), ('LANDLORD', 'Locador')], default='ATTENDANT', help_text='Nível de permissão do usuário no sistema', max_length=20, verbose_name='Tipo de Usuário')),
                ('telefone', models.CharField(blank=True, help_text='Telefone de contato', max_length=20, verbose_name='Telefone')),
                ('cpf', models.CharField(blank=True, help_text='CPF do usuário', max_length=14, null=True, unique=True, verbose_name='CPF')),
                ('avatar', models.ImageField(blank=True, help_text='Foto de perfil do usuário', null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'core_usuario',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comanda',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('numero_comanda', models.CharField(help_text='Número único da comanda', max_length=50, unique=True, verbose_name='Número da Comanda')),
                ('mes_referencia', models.DateField(help_text='Primeiro dia do mês de referência (formato YYYY-MM-01)', verbose_name='Mês de Referência')),
                ('ano_referencia', models.PositiveIntegerField(help_text='Ano de referência da cobrança', validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)], verbose_name='Ano de Referência')),
                ('status', models.CharField(choices=[('PENDING', 'Pendente'), ('PAID', 'Paga'), ('OVERDUE', 'Vencida'), ('PARTIAL', 'Parcialmente Paga'), ('CANCELLED', 'Cancelada')], default='PENDING', help_text='Status atual da comanda', max_length=20, verbose_name='Status')),
                ('data_vencimento', models.DateField(help_text='Data de vencimento da comanda', verbose_name='Data de Vencimento')),
                ('valor_aluguel', models.DecimalField(decimal_places=2, help_text='Valor do aluguel no mês de referência', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor do Aluguel')),
                ('valor_condominio', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor do condomínio no mês de referência', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor do Condomínio')),
                ('valor_iptu', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor proporcional do IPTU no mês', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor do IPTU')),
                ('valor_administracao', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Taxa de administração da imobiliária', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Taxa de Administração')),
                ('outros_creditos', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Créditos diversos (valores negativos reduzem o total)', max_digits=10, verbose_name='Outros Créditos')),
                ('outros_debitos', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Débitos diversos (multas, juros, etc.)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Outros Débitos')),
                ('multa', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Multa por atraso no pagamento', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Multa')),
                ('juros', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Juros por atraso no pagamento', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Juros')),
                ('desconto', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Desconto aplicado na comanda', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Desconto')),
                ('data_pagamento', models.DateField(blank=True, help_text='Data efetiva do pagamento', null=True, verbose_name='Data de Pagamento')),
                ('valor_pago', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor efetivamente pago', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor Pago')),
                ('forma_pagamento', models.CharField(blank=True, help_text='Forma de pagamento utilizada', max_length=100, verbose_name='Forma de Pagamento')),
                ('comprovante_pagamento', models.FileField(blank=True, help_text='Arquivo do comprovante de pagamento', null=True, upload_to='comprovantes/', verbose_name='Comprovante de Pagamento')),
                ('notificacao_enviada_7dias', models.BooleanField(default=False, verbose_name='Notificação 7 dias enviada')),
                ('notificacao_enviada_1dia', models.BooleanField(default=False, verbose_name='Notificação 1 dia enviada')),
                ('notificacao_atraso_enviada', models.BooleanField(default=False, verbose_name='Notificação de atraso enviada')),
                ('observacoes', models.TextField(blank=True, help_text='Observações sobre a comanda', verbose_name='Observações')),
            ],
            options={
                'verbose_name': 'Comanda',
                'verbose_name_plural': 'Comandas',
                'db_table': 'core_comanda',
                'ordering': ['-ano_referencia', '-mes_referencia'],
            },
        ),
        migrations.CreateModel(
            name='Fiador',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('nome_completo', models.CharField(help_text='Nome completo do fiador', max_length=200, verbose_name='Nome Completo')),
                ('cpf', models.CharField(help_text='CPF do fiador (formato: 000.000.000-00)', max_length=14, unique=True, validators=[core.models.validate_cpf], verbose_name='CPF')),
                ('rg', models.CharField(help_text='Exemplo: 109521205 SESP PR', max_length=50, verbose_name='RG')),
                ('data_nascimento', models.DateField(help_text='Data de nascimento do fiador', verbose_name='Data de Nascimento')),
                ('nome_pai', models.CharField(blank=True, help_text='Nome completo do pai', max_length=200, verbose_name='Nome do Pai')),
                ('nome_mae', models.CharField(blank=True, help_text='Nome completo da mãe', max_length=200, verbose_name='Nome da Mãe')),
                ('telefone', models.CharField(help_text='Telefone principal de contato', max_length=20, verbose_name='Telefone Principal')),
                ('email', models.EmailField(help_text='E-mail principal de contato', max_length=254, verbose_name='E-mail')),
                ('outro_telefone', models.CharField(blank=True, help_text='Telefone secundário', max_length=20, verbose_name='Outro Telefone')),
                ('nome_contato_emergencia', models.CharField(blank=True, help_text='Nome completo do contato', max_length=200, verbose_name='Nome do Contato de Emergência')),
                ('telefone_contato_emergencia', models.CharField(blank=True, help_text='Telefone do contato', max_length=20, verbose_name='Telefone do Contato de Emergência')),
                ('endereco_completo', models.TextField(help_text='Endereço completo do fiador', verbose_name='Endereço Completo')),
                ('cep', models.CharField(help_text='CEP no formato 12345-678', max_length=9, verbose_name='CEP')),
                ('empresa_trabalho', models.CharField(blank=True, help_text='Nome da empresa onde trabalha', max_length=200, verbose_name='Empresa/Trabalho')),
                ('endereco_empresa', models.TextField(blank=True, help_text='Endereço completo da empresa', verbose_name='Endereço da Empresa')),
                ('telefone_empresa', models.CharField(blank=True, help_text='Telefone da empresa', max_length=20, verbose_name='Telefone da Empresa')),
                ('contato_empresa', models.CharField(blank=True, help_text='Nome do contato/supervisor na empresa', max_length=200, verbose_name='Contato na Empresa')),
                ('tempo_empresa', models.CharField(blank=True, help_text='Exemplo: 2 anos e 3 meses', max_length=50, verbose_name='Tempo na Empresa')),
                ('renda_mensal', models.DecimalField(blank=True, decimal_places=2, help_text='Renda mensal declarada', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Renda Mensal')),
            ],
            options={
                'verbose_name': 'Fiador',
                'verbose_name_plural': 'Fiadores',
                'db_table': 'core_fiador',
                'ordering': ['nome_completo'],
            },
        ),
        migrations.CreateModel(
            name='Imovel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('codigo_imovel', models.CharField(help_text='Código único de identificação do imóvel', max_length=20, unique=True, verbose_name='Código do Imóvel')),
                ('tipo_imovel', models.CharField(choices=[('APARTMENT', 'Apartamento'), ('HOUSE', 'Casa'), ('COMMERCIAL', 'Comercial'), ('LAND', 'Terreno'), ('WAREHOUSE', 'Galpão'), ('OFFICE', 'Sala'), ('STORE', 'Loja')], help_text='Categoria do imóvel', max_length=20, verbose_name='Tipo do Imóvel')),
                ('status', models.CharField(choices=[('AVAILABLE', 'Disponível'), ('OCCUPIED', 'Ocupado'), ('MAINTENANCE', 'Em Manutenção'), ('SOLD', 'Vendido'), ('INACTIVE', 'Inativo')], default='AVAILABLE', help_text='Status atual do imóvel', max_length=20, verbose_name='Status')),
                ('endereco', models.CharField(help_text='Logradouro completo', max_length=300, verbose_name='Endereço')),
                ('numero', models.CharField(help_text='Número do imóvel', max_length=10, verbose_name='Número')),
                ('bairro', models.CharField(help_text='Bairro do imóvel', max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(help_text='Cidade do imóvel', max_length=100, verbose_name='Cidade')),
                ('estado', models.CharField(help_text='UF do estado (2 letras)', max_length=2, verbose_name='Estado')),
                ('cep', models.CharField(help_text='CEP no formato 12345-678', max_length=9, verbose_name='CEP')),
                ('area_total', models.DecimalField(decimal_places=2, help_text='Área total do imóvel em metros quadrados', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Área Total (m²)')),
                ('quartos', models.PositiveIntegerField(default=0, help_text='Número de quartos', verbose_name='Quartos')),
                ('banheiros', models.PositiveIntegerField(default=0, help_text='Número de banheiros', verbose_name='Banheiros')),
                ('valor_aluguel', models.DecimalField(decimal_places=2, help_text='Valor mensal do aluguel', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Valor do Aluguel')),
                ('valor_condominio', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor mensal do condomínio', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor do Condomínio')),
                ('conta_agua_esgoto', models.CharField(blank=True, help_text='Exemplo: 50683-4', max_length=50, verbose_name='Conta de Água/Esgoto')),
                ('numero_hidrometro', models.CharField(blank=True, help_text='Exemplo: Y19S381570', max_length=50, verbose_name='Número do Hidrômetro')),
                ('unidade_consumidora_energia', models.CharField(blank=True, help_text='Exemplo: 84829729', max_length=50, verbose_name='Unidade Consumidora de Energia')),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada do imóvel', verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Imóvel',
                'verbose_name_plural': 'Imóveis',
                'db_table': 'core_imovel',
            },
        ),
        migrations.CreateModel(
            name='Locador',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('tipo_locador', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], default='PF', help_text='Pessoa física ou jurídica', max_length=2, verbose_name='Tipo de Locador')),
                ('nome_razao_social', models.CharField(help_text='Nome completo ou razão social', max_length=200, verbose_name='Nome/Razão Social')),
                ('representante', models.CharField(blank=True, help_text='Nome do representante legal do locador', max_length=200, verbose_name='Representante')),
                ('cpf_cnpj', models.CharField(help_text='CPF para pessoa física ou CNPJ para pessoa jurídica', max_length=18, unique=True, verbose_name='CPF/CNPJ')),
                ('telefone', models.CharField(help_text='Telefone principal de contato', max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(help_text='E-mail principal de contato', max_length=254, verbose_name='E-mail')),
                ('endereco_completo', models.TextField(help_text='Endereço completo do locador', verbose_name='Endereço Completo')),
                ('cep', models.CharField(help_text='CEP no formato 12345-678', max_length=9, verbose_name='CEP')),
                ('observacoes', models.TextField(blank=True, help_text='Observações gerais sobre o locador', verbose_name='Observações')),
                ('usuario', models.OneToOneField(help_text='Usuário associado ao locador', on_delete=django.db.models.deletion.PROTECT, related_name='locador_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Locador',
                'verbose_name_plural': 'Locadores',
                'db_table': 'core_locador',
            },
        ),
        migrations.CreateModel(
            name='LogGeracaoComandas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_execucao', models.DateTimeField(auto_now_add=True)),
                ('mes_referencia', models.DateField(help_text='Mês/ano de referência (YYYY-MM-01)')),
                ('comandas_geradas', models.IntegerField(default=0)),
                ('comandas_duplicadas', models.IntegerField(default=0)),
                ('locacoes_processadas', models.IntegerField(default=0)),
                ('sucesso', models.BooleanField(default=True)),
                ('mensagem', models.TextField(blank=True)),
                ('erro', models.TextField(blank=True)),
                ('executado_por', models.CharField(default='Sistema', help_text='manual, cron, celery, sistema', max_length=50)),
            ],
            options={
                'verbose_name': 'Log de Geração de Comandas',
                'verbose_name_plural': 'Logs de Geração de Comandas',
                'ordering': ['-data_execucao'],
            },
        ),
        migrations.CreateModel(
            name='TemplateContrato',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Template')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('arquivo_template', models.FileField(help_text='Formatos aceitos: .docx (Word) ou .odt (LibreOffice)', upload_to='templates_contratos/', validators=[core.models.validar_arquivo_template], verbose_name='Arquivo do Template')),
                ('tipo_imovel', models.CharField(blank=True, choices=[('APARTMENT', 'Apartamento'), ('HOUSE', 'Casa'), ('COMMERCIAL', 'Comercial'), ('LAND', 'Terreno'), ('WAREHOUSE', 'Galpão'), ('OFFICE', 'Sala'), ('STORE', 'Loja')], help_text='Se preenchido, este template será usado para este tipo', max_length=20, verbose_name='Tipo de Imóvel')),
                ('is_default', models.BooleanField(default=False, help_text='Usar como template padrão quando não houver específico', verbose_name='Template Padrão')),
                ('locador', models.ForeignKey(blank=True, help_text='Se preenchido, este template será usado para este locador', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='templates_contrato', to='core.locador', verbose_name='Locador Específico')),
            ],
            options={
                'verbose_name': 'Template de Contrato',
                'verbose_name_plural': 'Templates de Contratos',
                'db_table': 'core_template_contrato',
                'ordering': ['-is_default', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Pagamento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('numero_pagamento', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Número do Pagamento')),
                ('valor_pago', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor Pago')),
                ('data_pagamento', models.DateField(verbose_name='Data do Pagamento')),
                ('data_confirmacao', models.DateTimeField(blank=True, null=True, verbose_name='Data de Confirmação')),
                ('forma_pagamento', models.CharField(choices=[('dinheiro', 'Dinheiro'), ('pix', 'PIX'), ('transferencia', 'Transferência Bancária'), ('boleto', 'Boleto'), ('cartao_credito', 'Cartão de Crédito'), ('cartao_debito', 'Cartão de Débito'), ('cheque', 'Cheque')], max_length=20, verbose_name='Forma de Pagamento')),
                ('status', models.CharField(choices=[('pendente', 'Pendente'), ('confirmado', 'Confirmado'), ('cancelado', 'Cancelado'), ('estornado', 'Estornado')], default='pendente', max_length=20, verbose_name='Status')),
                ('comprovante', models.FileField(blank=True, null=True, upload_to='comprovantes/%Y/%m/', verbose_name='Comprovante')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('comanda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagamentos', to='core.comanda', verbose_name='Comanda')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pagamentos_registrados', to=settings.AUTH_USER_MODEL, verbose_name='Usuário que Registrou')),
            ],
            options={
                'verbose_name': 'Pagamento',
                'verbose_name_plural': 'Pagamentos',
                'db_table': 'core_pagamento',
                'ordering': ['-data_pagamento', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificacaoLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tipo', models.CharField(choices=[('EMAIL', 'Email'), ('WHATSAPP', 'WhatsApp'), ('SMS', 'SMS')], max_length=20)),
                ('destinatario', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('ENVIADO', 'Enviado'), ('ERRO', 'Erro'), ('PENDENTE', 'Pendente')], max_length=20)),
                ('mensagem', models.TextField(blank=True)),
                ('data_envio', models.DateTimeField(auto_now_add=True)),
                ('comanda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notificacoes', to='core.comanda')),
            ],
            options={
                'verbose_name': 'Log de Notificação',
                'verbose_name_plural': 'Logs de Notificações',
                'ordering': ['-data_envio'],
            },
        ),
        migrations.CreateModel(
            name='Locatario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('nome_razao_social', models.CharField(help_text='Nome completo ou razão social', max_length=200, verbose_name='Nome/Razão Social')),
                ('cpf_cnpj', models.CharField(help_text='CPF para pessoa física ou CNPJ para pessoa jurídica', max_length=18, unique=True, verbose_name='CPF/CNPJ')),
                ('rg', models.CharField(blank=True, help_text='Exemplo: 109521205 SESP PR', max_length=50, verbose_name='RG')),
                ('data_nascimento', models.DateField(blank=True, help_text='Data de nascimento do locatário', null=True, verbose_name='Data de Nascimento')),
                ('nome_pai', models.CharField(blank=True, help_text='Nome completo do pai', max_length=200, verbose_name='Nome do Pai')),
                ('nome_mae', models.CharField(blank=True, help_text='Nome completo da mãe', max_length=200, verbose_name='Nome da Mãe')),
                ('telefone', models.CharField(help_text='Telefone principal de contato', max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(help_text='E-mail principal de contato', max_length=254, verbose_name='E-mail')),
                ('outro_telefone', models.CharField(blank=True, help_text='Telefone secundário', max_length=20, verbose_name='Outro Telefone')),
                ('nome_contato_emergencia', models.CharField(blank=True, help_text='Nome completo do contato', max_length=200, verbose_name='Nome do Contato de Emergência')),
                ('telefone_contato_emergencia', models.CharField(blank=True, help_text='Telefone do contato', max_length=20, verbose_name='Telefone do Contato de Emergência')),
                ('endereco_completo', models.TextField(help_text='Endereço completo do locatário', verbose_name='Endereço Completo')),
                ('empresa_trabalho', models.CharField(blank=True, help_text='Nome da empresa onde trabalha', max_length=200, verbose_name='Empresa/Trabalho')),
                ('endereco_empresa', models.TextField(blank=True, help_text='Endereço completo da empresa', verbose_name='Endereço da Empresa')),
                ('telefone_empresa', models.CharField(blank=True, help_text='Telefone da empresa', max_length=20, verbose_name='Telefone da Empresa')),
                ('contato_empresa', models.CharField(blank=True, help_text='Nome do contato/supervisor na empresa', max_length=200, verbose_name='Contato na Empresa')),
                ('tempo_empresa', models.CharField(blank=True, help_text='Exemplo: 2 anos e 3 meses', max_length=50, verbose_name='Tempo na Empresa')),
                ('renda_mensal', models.DecimalField(blank=True, decimal_places=2, help_text='Renda mensal declarada', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Renda Mensal')),
                ('fiador', models.ForeignKey(blank=True, help_text='Fiador/Garantidor do locatário (se houver)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locatarios_afiancados', to='core.fiador', verbose_name='Fiador')),
            ],
            options={
                'verbose_name': 'Locatário',
                'verbose_name_plural': 'Locatários',
                'db_table': 'core_locatario',
            },
        ),
        migrations.CreateModel(
            name='Locacao',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('numero_contrato', models.CharField(blank=True, help_text='Gerado automaticamente: YYYYMM + 6 dígitos CPF + código imóvel', max_length=50, unique=True, verbose_name='Número do Contrato')),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativa'), ('INACTIVE', 'Inativa'), ('PENDING', 'Pendente'), ('EXPIRED', 'Vencida')], default='PENDING', help_text='Status atual do contrato', max_length=20, verbose_name='Status')),
                ('data_inicio', models.DateField(help_text='Data de início da locação', verbose_name='Data de Início')),
                ('data_fim', models.DateField(help_text='Data de término da locação', verbose_name='Data de Fim')),
                ('valor_aluguel', models.DecimalField(decimal_places=2, help_text='Valor mensal do aluguel no contrato', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Valor do Aluguel')),
                ('dia_vencimento', models.IntegerField(default=10, help_text='Dia do mês para vencimento da comanda (1-31)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Dia de Vencimento')),
                ('imovel', models.ForeignKey(help_text='Imóvel objeto da locação', on_delete=django.db.models.deletion.PROTECT, related_name='locacoes', to='core.imovel', verbose_name='Imóvel')),
                ('locatario', models.ForeignKey(help_text='Locatário responsável pelo contrato', on_delete=django.db.models.deletion.PROTECT, related_name='locacoes', to='core.locatario', verbose_name='Locatário')),
            ],
            options={
                'verbose_name': 'Locação',
                'verbose_name_plural': 'Locações',
                'db_table': 'core_locacao',
            },
        ),
        migrations.AddField(
            model_name='imovel',
            name='locador',
            field=models.ForeignKey(help_text='Proprietário do imóvel', on_delete=django.db.models.deletion.PROTECT, related_name='imoveis', to='core.locador', verbose_name='Locador'),
        ),
        migrations.CreateModel(
            name='ConfiguracaoSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_vencimento_padrao', models.IntegerField(default=10, help_text='Dia do mês para vencimento das comandas (1-31)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('percentual_multa', models.DecimalField(decimal_places=2, default=Decimal('2.00'), help_text='Percentual de multa por atraso (%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('percentual_juros_mensal', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Percentual de juros ao mês (%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('gerar_comandas_automaticamente', models.BooleanField(default=True, help_text='Gerar comandas automaticamente todo mês')),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('atualizado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='configuracoes_atualizadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuração do Sistema',
                'verbose_name_plural': 'Configurações do Sistema',
            },
        ),
        migrations.AddField(
            model_name='comanda',
            name='locacao',
            field=models.ForeignKey(help_text='Contrato de locação associado', on_delete=django.db.models.deletion.PROTECT, related_name='comandas', to='core.locacao', verbose_name='Locação'),
        ),
        migrations.AlterUniqueTogether(
            name='comanda',
            unique_together={('locacao', 'mes_referencia', 'ano_referencia')},
        ),
    ]
