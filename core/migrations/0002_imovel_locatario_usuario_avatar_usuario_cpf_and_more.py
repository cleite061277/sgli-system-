# Generated by Django 4.2.8 on 2025-09-27 02:42

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Imovel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('codigo_imovel', models.CharField(help_text='Código único de identificação do imóvel', max_length=20, unique=True, verbose_name='Código do Imóvel')),
                ('tipo_imovel', models.CharField(choices=[('APARTMENT', 'Apartamento'), ('HOUSE', 'Casa'), ('COMMERCIAL', 'Comercial'), ('LAND', 'Terreno'), ('WAREHOUSE', 'Galpão'), ('OFFICE', 'Sala'), ('STORE', 'Loja')], help_text='Categoria do imóvel', max_length=20, verbose_name='Tipo do Imóvel')),
                ('status', models.CharField(choices=[('AVAILABLE', 'Disponível'), ('OCCUPIED', 'Ocupado'), ('MAINTENANCE', 'Em Manutenção'), ('SOLD', 'Vendido'), ('INACTIVE', 'Inativo')], default='AVAILABLE', help_text='Status atual do imóvel', max_length=20, verbose_name='Status')),
                ('endereco', models.CharField(help_text='Logradouro completo', max_length=300, verbose_name='Endereço')),
                ('numero', models.CharField(help_text='Número do imóvel', max_length=10, verbose_name='Número')),
                ('bairro', models.CharField(help_text='Bairro do imóvel', max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(help_text='Cidade do imóvel', max_length=100, verbose_name='Cidade')),
                ('estado', models.CharField(help_text='UF do estado (2 letras)', max_length=2, verbose_name='Estado')),
                ('cep', models.CharField(help_text='CEP no formato 12345-678', max_length=9, verbose_name='CEP')),
                ('area_total', models.DecimalField(decimal_places=2, help_text='Área total do imóvel em metros quadrados', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Área Total (m²)')),
                ('quartos', models.PositiveIntegerField(default=0, help_text='Número de quartos', verbose_name='Quartos')),
                ('banheiros', models.PositiveIntegerField(default=0, help_text='Número de banheiros', verbose_name='Banheiros')),
                ('valor_aluguel', models.DecimalField(decimal_places=2, help_text='Valor mensal do aluguel', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Valor do Aluguel')),
                ('valor_condominio', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor mensal do condomínio', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valor do Condomínio')),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada do imóvel', verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Imóvel',
                'verbose_name_plural': 'Imóveis',
                'db_table': 'core_imovel',
            },
        ),
        migrations.CreateModel(
            name='Locatario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('nome_razao_social', models.CharField(help_text='Nome completo ou razão social', max_length=200, verbose_name='Nome/Razão Social')),
                ('cpf_cnpj', models.CharField(help_text='CPF para pessoa física ou CNPJ para pessoa jurídica', max_length=18, unique=True, verbose_name='CPF/CNPJ')),
                ('telefone', models.CharField(help_text='Telefone principal de contato', max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(help_text='E-mail principal de contato', max_length=254, verbose_name='E-mail')),
                ('endereco_completo', models.TextField(help_text='Endereço completo do locatário', verbose_name='Endereço Completo')),
                ('renda_mensal', models.DecimalField(blank=True, decimal_places=2, help_text='Renda mensal declarada', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Renda Mensal')),
            ],
            options={
                'verbose_name': 'Locatário',
                'verbose_name_plural': 'Locatários',
                'db_table': 'core_locatario',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='avatar',
            field=models.ImageField(blank=True, help_text='Foto de perfil do usuário', null=True, upload_to='avatars/', verbose_name='Avatar'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='cpf',
            field=models.CharField(blank=True, help_text='CPF do usuário', max_length=14, null=True, unique=True, verbose_name='CPF'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='telefone',
            field=models.CharField(blank=True, help_text='Telefone de contato', max_length=20, verbose_name='Telefone'),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação'),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='tipo_usuario',
            field=models.CharField(choices=[('ADMIN', 'Administrador'), ('MANAGER', 'Gerente'), ('ATTENDANT', 'Atendente'), ('FINANCIAL', 'Financeiro'), ('LANDLORD', 'Locador')], default='ATTENDANT', help_text='Nível de permissão do usuário no sistema', max_length=20, verbose_name='Tipo de Usuário'),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização'),
        ),
        migrations.CreateModel(
            name='Locador',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('tipo_locador', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], default='PF', help_text='Pessoa física ou jurídica', max_length=2, verbose_name='Tipo de Locador')),
                ('nome_razao_social', models.CharField(help_text='Nome completo ou razão social', max_length=200, verbose_name='Nome/Razão Social')),
                ('cpf_cnpj', models.CharField(help_text='CPF para pessoa física ou CNPJ para pessoa jurídica', max_length=18, unique=True, verbose_name='CPF/CNPJ')),
                ('telefone', models.CharField(help_text='Telefone principal de contato', max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(help_text='E-mail principal de contato', max_length=254, verbose_name='E-mail')),
                ('endereco_completo', models.TextField(help_text='Endereço completo do locador', verbose_name='Endereço Completo')),
                ('cep', models.CharField(help_text='CEP no formato 12345-678', max_length=9, verbose_name='CEP')),
                ('observacoes', models.TextField(blank=True, help_text='Observações gerais sobre o locador', verbose_name='Observações')),
                ('usuario', models.OneToOneField(help_text='Usuário associado ao locador', on_delete=django.db.models.deletion.PROTECT, related_name='locador_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Locador',
                'verbose_name_plural': 'Locadores',
                'db_table': 'core_locador',
            },
        ),
        migrations.CreateModel(
            name='Locacao',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do registro', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da criação do registro', verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo (soft delete)', verbose_name='Ativo')),
                ('numero_contrato', models.CharField(help_text='Número único do contrato de locação', max_length=50, unique=True, verbose_name='Número do Contrato')),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativa'), ('INACTIVE', 'Inativa'), ('PENDING', 'Pendente'), ('EXPIRED', 'Vencida')], default='PENDING', help_text='Status atual do contrato', max_length=20, verbose_name='Status')),
                ('data_inicio', models.DateField(help_text='Data de início da locação', verbose_name='Data de Início')),
                ('data_fim', models.DateField(help_text='Data de término da locação', verbose_name='Data de Fim')),
                ('valor_aluguel', models.DecimalField(decimal_places=2, help_text='Valor mensal do aluguel no contrato', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Valor do Aluguel')),
                ('imovel', models.ForeignKey(help_text='Imóvel objeto da locação', on_delete=django.db.models.deletion.PROTECT, related_name='locacoes', to='core.imovel', verbose_name='Imóvel')),
                ('locatario', models.ForeignKey(help_text='Locatário responsável pelo contrato', on_delete=django.db.models.deletion.PROTECT, related_name='locacoes', to='core.locatario', verbose_name='Locatário')),
            ],
            options={
                'verbose_name': 'Locação',
                'verbose_name_plural': 'Locações',
                'db_table': 'core_locacao',
            },
        ),
        migrations.AddField(
            model_name='imovel',
            name='locador',
            field=models.ForeignKey(help_text='Proprietário do imóvel', on_delete=django.db.models.deletion.PROTECT, related_name='imoveis', to='core.locador', verbose_name='Locador'),
        ),
    ]
